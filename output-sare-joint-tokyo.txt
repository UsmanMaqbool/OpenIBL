Use GPU: 0 for testing, rank no.0 of world_size 1
==========
Args:Namespace(launcher='pytorch', tcp_port='5017', dataset='tokyo', scale='250k', test_batch_size=32, workers=2, height=480, width=640, num_clusters=64, arch='vgg16', nowhiten=False, sync_gather=False, features=4096, resume='/media/leo/2C737A9872F69ECF/why-so-deepv2-data/pittsburgh/netvlad-run/pitts30k-vgg16/conv5-sare_joint-lr0.0001-tuple1-19-Mar/model_best.pth.tar', vlad=True, reduction=True, rerank=False, rr_topk=25, lambda_value=0, print_freq=10, data_dir='/mnt/ssd/usman_ws/OpenIBL/examples/data', logs_dir='/mnt/ssd/usman_ws/OpenIBL/examples/logs', rank=0, ngpus_per_node=1, gpu=0, world_size=1)
==========
Tokyo dataset loaded
  subset        | # pids | # images
  ---------------------------------
  train_query   |  4035  |    48420
  train_gallery |  4092  |    49104
  val_query     |  1308  |    15696
  val_gallery   |  2780  |    33360
  test_query    |    35  |      315
  test_gallery  |  6254  |    75984
Encoder loaded!
=> Loaded checkpoint '/media/leo/2C737A9872F69ECF/why-so-deepv2-data/pittsburgh/netvlad-run/pitts30k-vgg16/conv5-sare_joint-lr0.0001-tuple1-19-Mar/model_best.pth.tar'
=> Start epoch 0  best recall5 94.9%
Evaluate on the test set:
load PCA parameters...
Extract Features: [100/315]	Time 0.052 (0.082)	Data 0.000 (0.009)	
Extract Features: [200/315]	Time 0.052 (0.067)	Data 0.000 (0.005)	
Extract Features: [300/315]	Time 0.058 (0.066)	Data 0.000 (0.003)	
gathering features from rank no.0
load PCA parameters...
Extract Features: [100/2375]	Time 1.378 (1.165)	Data 0.659 (0.386)	
Extract Features: [200/2375]	Time 0.851 (1.151)	Data 0.117 (0.393)	
Extract Features: [300/2375]	Time 0.780 (1.132)	Data 0.000 (0.379)	
Extract Features: [400/2375]	Time 0.704 (1.148)	Data 0.000 (0.393)	
Extract Features: [500/2375]	Time 0.788 (1.150)	Data 0.000 (0.395)	
Extract Features: [600/2375]	Time 0.685 (1.147)	Data 0.000 (0.392)	
Extract Features: [700/2375]	Time 0.726 (1.144)	Data 0.000 (0.390)	
Extract Features: [800/2375]	Time 0.896 (1.144)	Data 0.101 (0.388)	
Extract Features: [900/2375]	Time 1.412 (1.146)	Data 0.645 (0.393)	
Extract Features: [1000/2375]	Time 1.023 (1.144)	Data 0.241 (0.387)	
Extract Features: [1100/2375]	Time 1.424 (1.144)	Data 0.712 (0.386)	
Extract Features: [1200/2375]	Time 1.157 (1.149)	Data 0.377 (0.392)	
Extract Features: [1300/2375]	Time 0.709 (1.145)	Data 0.000 (0.390)	
Extract Features: [1400/2375]	Time 0.939 (1.147)	Data 0.212 (0.392)	
Extract Features: [1500/2375]	Time 1.488 (1.149)	Data 0.739 (0.394)	
Extract Features: [1600/2375]	Time 2.005 (1.150)	Data 1.252 (0.394)	
Extract Features: [1700/2375]	Time 1.035 (1.152)	Data 0.291 (0.397)	
Extract Features: [1800/2375]	Time 1.567 (1.152)	Data 0.869 (0.396)	
Extract Features: [1900/2375]	Time 1.052 (1.155)	Data 0.000 (0.397)	
Extract Features: [2000/2375]	Time 1.673 (1.160)	Data 0.265 (0.386)	
Extract Features: [2100/2375]	Time 1.094 (1.164)	Data 0.326 (0.380)	
Extract Features: [2200/2375]	Time 1.871 (1.165)	Data 1.172 (0.383)	
Extract Features: [2300/2375]	Time 2.060 (1.163)	Data 1.312 (0.384)	
gathering features from rank no.0
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          76.5%
  top-5          83.5%
  top-10         86.7%
