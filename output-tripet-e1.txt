Use GPU: 0 for training, rank no.0 of world_size 1
==========
Args:Namespace(arch='vgg16', cache_size=1000, data_dir='/mnt/ssd/usman_ws/OpenIBL/examples/data', dataset='pitts', deterministic=False, epochs=1, eval_step=1, features=4096, gpu=0, height=480, init_dir='/mnt/ssd/usman_ws/OpenIBL/examples/../logs', iters=0, launcher='pytorch', layers='conv5', logs_dir='/media/leo/2C737A9872F69ECF/why-so-deepv2-data/pittsburgh/netvlad-run/pitts30k-vgg16/conv5-triplet-lr0.001-tuple1', loss_type='triplet', lr=0.001, margin=0.1, momentum=0.9, neg_num=10, neg_pool=1000, ngpus_per_node=1, nowhiten=False, num_clusters=64, print_freq=200, rank=0, rerank=False, resume='', scale='30k', seed=43, step_size=5, sync_gather=True, syncbn=True, tcp_port='6010', test_batch_size=32, tuple_size=1, vlad=True, weight_decay=0.001, width=640, workers=1, world_size=1)
==========
Pittsburgh dataset loaded
  subset        | # pids | # images
  ---------------------------------
  train_query   |   311  |     7320
  train_gallery |   417  |    10000
  val_query     |   319  |     7608
  val_gallery   |   417  |    10000
  test_query    |   286  |     6816
  test_gallery  |   417  |    10000
Loading centroids from /mnt/ssd/usman_ws/OpenIBL/examples/../logs/vgg16_pitts_64_desc_cen.hdf5
Encoder loaded!
Test the initial model:
Extract Features: [100/551]	Time 0.969 (1.070)	Data 0.291 (0.339)	
Extract Features: [200/551]	Time 0.919 (1.006)	Data 0.188 (0.279)	
Extract Features: [300/551]	Time 1.119 (1.030)	Data 0.407 (0.305)	
Extract Features: [400/551]	Time 0.904 (0.998)	Data 0.117 (0.277)	
Extract Features: [500/551]	Time 0.702 (0.962)	Data 0.000 (0.246)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          79.6%
  top-5          92.9%
  top-10         95.7%
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 1.090 (1.128)	Data 0.403 (0.434)	
Extract Features: [200/542]	Time 0.934 (1.092)	Data 0.258 (0.399)	
Extract Features: [300/542]	Time 1.712 (1.069)	Data 0.997 (0.368)	
Extract Features: [400/542]	Time 0.881 (1.042)	Data 0.155 (0.338)	
Extract Features: [500/542]	Time 0.892 (1.007)	Data 0.127 (0.298)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-0][200/1000]	Time 0.562 (0.619)	Data 0.103 (0.174)	Loss 0.028 (0.040)
Epoch: [0-0][400/1000]	Time 0.514 (0.574)	Data 0.022 (0.124)	Loss 0.000 (0.037)
Epoch: [0-0][600/1000]	Time 0.487 (0.544)	Data 0.028 (0.092)	Loss 0.000 (0.038)
Epoch: [0-0][800/1000]	Time 0.456 (0.527)	Data 0.021 (0.075)	Loss 0.000 (0.036)
Epoch: [0-0][1000/1000]	Time 0.419 (0.515)	Data 0.008 (0.064)	Loss 0.000 (0.036)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.674 (0.719)	Data 0.000 (0.014)	
Extract Features: [200/542]	Time 0.719 (0.716)	Data 0.000 (0.011)	
Extract Features: [300/542]	Time 1.712 (0.736)	Data 0.913 (0.020)	
Extract Features: [400/542]	Time 0.881 (0.762)	Data 0.199 (0.048)	
Extract Features: [500/542]	Time 0.807 (0.765)	Data 0.120 (0.056)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-1][200/1000]	Time 0.464 (0.627)	Data 0.022 (0.179)	Loss 0.000 (0.036)
Epoch: [0-1][400/1000]	Time 0.474 (0.572)	Data 0.020 (0.118)	Loss 0.022 (0.035)
Epoch: [0-1][600/1000]	Time 0.465 (0.539)	Data 0.019 (0.086)	Loss 0.000 (0.032)
Epoch: [0-1][800/1000]	Time 0.463 (0.523)	Data 0.018 (0.070)	Loss 0.000 (0.031)
Epoch: [0-1][1000/1000]	Time 0.422 (0.512)	Data 0.009 (0.060)	Loss 0.054 (0.031)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.703 (0.751)	Data 0.000 (0.016)	
Extract Features: [200/542]	Time 0.850 (0.748)	Data 0.000 (0.008)	
Extract Features: [300/542]	Time 1.662 (0.776)	Data 0.909 (0.025)	
Extract Features: [400/542]	Time 0.822 (0.795)	Data 0.112 (0.048)	
Extract Features: [500/542]	Time 0.711 (0.786)	Data 0.000 (0.042)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-2][200/1000]	Time 0.538 (0.674)	Data 0.118 (0.240)	Loss 0.000 (0.030)
Epoch: [0-2][400/1000]	Time 0.446 (0.602)	Data 0.018 (0.166)	Loss 0.019 (0.028)
Epoch: [0-2][600/1000]	Time 0.436 (0.555)	Data 0.018 (0.123)	Loss 0.000 (0.027)
Epoch: [0-2][800/1000]	Time 0.454 (0.530)	Data 0.023 (0.097)	Loss 0.000 (0.026)
Epoch: [0-2][1000/1000]	Time 0.433 (0.517)	Data 0.009 (0.082)	Loss 0.000 (0.025)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.716 (0.754)	Data 0.000 (0.017)	
Extract Features: [200/542]	Time 0.766 (0.735)	Data 0.000 (0.009)	
Extract Features: [300/542]	Time 1.418 (0.758)	Data 0.729 (0.021)	
Extract Features: [400/542]	Time 0.811 (0.771)	Data 0.000 (0.035)	
Extract Features: [500/542]	Time 0.789 (0.766)	Data 0.000 (0.032)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-3][200/1000]	Time 0.615 (0.611)	Data 0.147 (0.162)	Loss 0.029 (0.028)
Epoch: [0-3][400/1000]	Time 0.461 (0.551)	Data 0.019 (0.106)	Loss 0.027 (0.025)
Epoch: [0-3][600/1000]	Time 0.445 (0.522)	Data 0.022 (0.079)	Loss 0.000 (0.025)
Epoch: [0-3][800/1000]	Time 0.440 (0.507)	Data 0.017 (0.064)	Loss 0.031 (0.024)
Epoch: [0-3][1000/1000]	Time 0.447 (0.495)	Data 0.008 (0.055)	Loss 0.000 (0.024)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.685 (0.775)	Data 0.000 (0.014)	
Extract Features: [200/542]	Time 0.699 (0.759)	Data 0.000 (0.007)	
Extract Features: [300/542]	Time 1.457 (0.763)	Data 0.720 (0.023)	
Extract Features: [400/542]	Time 0.722 (0.777)	Data 0.000 (0.037)	
Extract Features: [500/542]	Time 0.797 (0.774)	Data 0.000 (0.038)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-4][200/1000]	Time 0.468 (0.518)	Data 0.019 (0.064)	Loss 0.000 (0.023)
Epoch: [0-4][400/1000]	Time 0.444 (0.498)	Data 0.019 (0.043)	Loss 0.000 (0.022)
Epoch: [0-4][600/1000]	Time 0.494 (0.489)	Data 0.026 (0.035)	Loss 0.055 (0.022)
Epoch: [0-4][800/1000]	Time 0.492 (0.486)	Data 0.019 (0.032)	Loss 0.032 (0.020)
Epoch: [0-4][1000/1000]	Time 0.426 (0.483)	Data 0.009 (0.030)	Loss 0.074 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.717 (0.742)	Data 0.000 (0.013)	
Extract Features: [200/542]	Time 0.711 (0.735)	Data 0.000 (0.007)	
Extract Features: [300/542]	Time 1.468 (0.748)	Data 0.778 (0.021)	
Extract Features: [400/542]	Time 0.757 (0.760)	Data 0.000 (0.030)	
Extract Features: [500/542]	Time 0.697 (0.752)	Data 0.000 (0.024)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-5][200/1000]	Time 0.431 (0.451)	Data 0.017 (0.027)	Loss 0.001 (0.019)
Epoch: [0-5][400/1000]	Time 0.433 (0.445)	Data 0.018 (0.023)	Loss 0.038 (0.020)
Epoch: [0-5][600/1000]	Time 0.430 (0.443)	Data 0.023 (0.022)	Loss 0.003 (0.020)
Epoch: [0-5][800/1000]	Time 0.460 (0.442)	Data 0.017 (0.021)	Loss 0.028 (0.019)
Epoch: [0-5][1000/1000]	Time 0.442 (0.447)	Data 0.008 (0.021)	Loss 0.019 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.690 (0.746)	Data 0.000 (0.013)	
Extract Features: [200/542]	Time 0.841 (0.748)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 1.314 (0.763)	Data 0.580 (0.018)	
Extract Features: [400/542]	Time 0.737 (0.767)	Data 0.000 (0.026)	
Extract Features: [500/542]	Time 0.710 (0.759)	Data 0.000 (0.021)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-6][200/1000]	Time 0.528 (0.498)	Data 0.034 (0.042)	Loss 0.021 (0.017)
Epoch: [0-6][400/1000]	Time 0.481 (0.497)	Data 0.019 (0.032)	Loss 0.000 (0.017)
Epoch: [0-6][600/1000]	Time 0.476 (0.486)	Data 0.019 (0.028)	Loss 0.038 (0.018)
Epoch: [0-6][800/1000]	Time 0.462 (0.486)	Data 0.018 (0.027)	Loss 0.066 (0.019)
Epoch: [0-6][1000/1000]	Time 0.467 (0.482)	Data 0.010 (0.025)	Loss 0.018 (0.019)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.682 (0.746)	Data 0.000 (0.012)	
Extract Features: [200/542]	Time 0.674 (0.727)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 1.265 (0.731)	Data 0.596 (0.016)	
Extract Features: [400/542]	Time 0.683 (0.732)	Data 0.000 (0.024)	
Extract Features: [500/542]	Time 0.692 (0.723)	Data 0.000 (0.019)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-7][200/320]	Time 0.514 (0.628)	Data 0.070 (0.187)	Loss 0.000 (0.019)
Extract Features: [100/551]	Time 0.828 (1.070)	Data 0.159 (0.343)	
Extract Features: [200/551]	Time 0.987 (1.007)	Data 0.223 (0.283)	
Extract Features: [300/551]	Time 1.203 (1.025)	Data 0.433 (0.304)	
Extract Features: [400/551]	Time 0.864 (1.004)	Data 0.141 (0.274)	
Extract Features: [500/551]	Time 0.795 (0.971)	Data 0.104 (0.239)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          86.7%
  top-5          95.5%
  top-10         97.2%

 * Finished epoch   0 recall@1: 86.7%  recall@5: 95.5%  recall@10: 97.2%  best@5: 95.5% *

Performing PCA reduction on the best model:
=> Loaded checkpoint '/media/leo/2C737A9872F69ECF/why-so-deepv2-data/pittsburgh/netvlad-run/pitts30k-vgg16/conv5-triplet-lr0.001-tuple1/model_best.pth.tar'
Extract Features: [100/542]	Time 0.862 (0.976)	Data 0.197 (0.272)	
Extract Features: [200/542]	Time 1.031 (0.960)	Data 0.367 (0.247)	
Extract Features: [300/542]	Time 1.668 (0.944)	Data 1.007 (0.242)	
Extract Features: [400/542]	Time 0.891 (0.938)	Data 0.215 (0.243)	
Extract Features: [500/542]	Time 0.854 (0.922)	Data 0.172 (0.229)	
calculating PCA parameters...
================= PCA RESULT ==================
U: (32768, 4096)
lams: (4096,)
mu: (32768, 1)
Utmu: (4096, 1)
===============================================
Testing on Pitts30k-test:
load PCA parameters...
Extract Features: [100/526]	Time 0.995 (1.108)	Data 0.318 (0.420)	
Extract Features: [200/526]	Time 1.001 (1.062)	Data 0.162 (0.373)	
Extract Features: [300/526]	Time 1.079 (1.039)	Data 0.344 (0.346)	
Extract Features: [400/526]	Time 1.119 (1.012)	Data 0.412 (0.312)	
Extract Features: [500/526]	Time 0.819 (0.982)	Data 0.073 (0.278)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          86.6%
  top-5          93.8%
  top-10         95.5%
