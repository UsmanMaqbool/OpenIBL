Use GPU: 0 for training, rank no.0 of world_size 1
==========
Args:Namespace(arch='vgg16', cache_size=1000, data_dir='/mnt/ssd/usman_ws/OpenIBL/examples/data', dataset='pitts', deterministic=False, epochs=2, eval_step=1, features=4096, gpu=0, height=480, init_dir='/mnt/ssd/usman_ws/OpenIBL/examples/../logs', iters=0, launcher='pytorch', layers='conv5', logs_dir='/media/leo/2C737A9872F69ECF/why-so-deepv2-data/pittsburgh/netvlad-run/pitts30k-vgg16/conv5-triplet-lr0.001-tuple1', loss_type='triplet', lr=0.001, margin=0.1, momentum=0.9, neg_num=10, neg_pool=1000, ngpus_per_node=1, nowhiten=False, num_clusters=64, print_freq=200, rank=0, rerank=False, resume='', scale='30k', seed=43, step_size=5, sync_gather=True, syncbn=True, tcp_port='6010', test_batch_size=32, tuple_size=1, vlad=True, weight_decay=0.001, width=640, workers=1, world_size=1)
==========
Pittsburgh dataset loaded
  subset        | # pids | # images
  ---------------------------------
  train_query   |   311  |     7320
  train_gallery |   417  |    10000
  val_query     |   319  |     7608
  val_gallery   |   417  |    10000
  test_query    |   286  |     6816
  test_gallery  |   417  |    10000
Loading centroids from /mnt/ssd/usman_ws/OpenIBL/examples/../logs/vgg16_pitts_64_desc_cen.hdf5
Encoder loaded!
Test the initial model:
Extract Features: [100/551]	Time 0.914 (1.015)	Data 0.208 (0.322)	
Extract Features: [200/551]	Time 0.919 (0.975)	Data 0.220 (0.276)	
Extract Features: [300/551]	Time 1.161 (1.001)	Data 0.488 (0.298)	
Extract Features: [400/551]	Time 0.891 (0.972)	Data 0.214 (0.274)	
Extract Features: [500/551]	Time 0.759 (0.942)	Data 0.087 (0.248)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          79.6%
  top-5          92.9%
  top-10         95.7%
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.997 (1.183)	Data 0.340 (0.520)	
Extract Features: [200/542]	Time 1.112 (1.117)	Data 0.452 (0.455)	
Extract Features: [300/542]	Time 1.671 (1.078)	Data 1.010 (0.416)	
Extract Features: [400/542]	Time 0.914 (1.043)	Data 0.250 (0.380)	
Extract Features: [500/542]	Time 0.816 (1.005)	Data 0.134 (0.340)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-0][200/1000]	Time 0.522 (0.585)	Data 0.086 (0.175)	Loss 0.027 (0.040)
Epoch: [0-0][400/1000]	Time 0.448 (0.536)	Data 0.019 (0.125)	Loss 0.000 (0.037)
Epoch: [0-0][600/1000]	Time 0.442 (0.508)	Data 0.028 (0.095)	Loss 0.004 (0.037)
Epoch: [0-0][800/1000]	Time 0.442 (0.490)	Data 0.020 (0.076)	Loss 0.000 (0.036)
Epoch: [0-0][1000/1000]	Time 0.411 (0.479)	Data 0.008 (0.065)	Loss 0.000 (0.035)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.667 (0.687)	Data 0.000 (0.014)	
Extract Features: [200/542]	Time 0.660 (0.687)	Data 0.000 (0.014)	
Extract Features: [300/542]	Time 1.608 (0.697)	Data 0.959 (0.024)	
Extract Features: [400/542]	Time 0.891 (0.726)	Data 0.223 (0.055)	
Extract Features: [500/542]	Time 0.663 (0.731)	Data 0.000 (0.060)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-1][200/1000]	Time 0.435 (0.627)	Data 0.022 (0.217)	Loss 0.000 (0.029)
Epoch: [0-1][400/1000]	Time 0.481 (0.555)	Data 0.073 (0.143)	Loss 0.017 (0.029)
Epoch: [0-1][600/1000]	Time 0.454 (0.519)	Data 0.018 (0.105)	Loss 0.000 (0.027)
Epoch: [0-1][800/1000]	Time 0.433 (0.499)	Data 0.019 (0.084)	Loss 0.000 (0.027)
Epoch: [0-1][1000/1000]	Time 0.418 (0.486)	Data 0.008 (0.071)	Loss 0.051 (0.027)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.657 (0.695)	Data 0.000 (0.016)	
Extract Features: [200/542]	Time 0.663 (0.688)	Data 0.000 (0.008)	
Extract Features: [300/542]	Time 1.654 (0.702)	Data 0.995 (0.023)	
Extract Features: [400/542]	Time 0.790 (0.723)	Data 0.124 (0.047)	
Extract Features: [500/542]	Time 0.689 (0.720)	Data 0.000 (0.043)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-2][200/1000]	Time 0.510 (0.513)	Data 0.103 (0.100)	Loss 0.000 (0.028)
Epoch: [0-2][400/1000]	Time 0.453 (0.484)	Data 0.017 (0.069)	Loss 0.033 (0.030)
Epoch: [0-2][600/1000]	Time 0.429 (0.469)	Data 0.017 (0.052)	Loss 0.000 (0.029)
Epoch: [0-2][800/1000]	Time 0.432 (0.461)	Data 0.021 (0.044)	Loss 0.000 (0.027)
Epoch: [0-2][1000/1000]	Time 0.416 (0.456)	Data 0.008 (0.039)	Loss 0.000 (0.026)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.669 (0.691)	Data 0.000 (0.014)	
Extract Features: [200/542]	Time 0.683 (0.685)	Data 0.000 (0.007)	
Extract Features: [300/542]	Time 1.498 (0.698)	Data 0.845 (0.022)	
Extract Features: [400/542]	Time 0.744 (0.717)	Data 0.069 (0.042)	
Extract Features: [500/542]	Time 0.669 (0.714)	Data 0.000 (0.040)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-3][200/1000]	Time 0.429 (0.461)	Data 0.018 (0.044)	Loss 0.000 (0.025)
Epoch: [0-3][400/1000]	Time 0.433 (0.450)	Data 0.017 (0.031)	Loss 0.041 (0.024)
Epoch: [0-3][600/1000]	Time 0.456 (0.445)	Data 0.018 (0.027)	Loss 0.000 (0.025)
Epoch: [0-3][800/1000]	Time 0.448 (0.443)	Data 0.017 (0.025)	Loss 0.020 (0.024)
Epoch: [0-3][1000/1000]	Time 0.416 (0.441)	Data 0.008 (0.024)	Loss 0.014 (0.023)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.673 (0.689)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.671 (0.684)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 1.399 (0.699)	Data 0.741 (0.021)	
Extract Features: [400/542]	Time 0.689 (0.708)	Data 0.000 (0.030)	
Extract Features: [500/542]	Time 0.679 (0.706)	Data 0.000 (0.028)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-4][200/1000]	Time 0.444 (0.446)	Data 0.020 (0.026)	Loss 0.004 (0.022)
Epoch: [0-4][400/1000]	Time 0.426 (0.441)	Data 0.016 (0.023)	Loss 0.000 (0.021)
Epoch: [0-4][600/1000]	Time 0.452 (0.440)	Data 0.022 (0.021)	Loss 0.078 (0.021)
Epoch: [0-4][800/1000]	Time 0.452 (0.439)	Data 0.017 (0.021)	Loss 0.056 (0.020)
Epoch: [0-4][1000/1000]	Time 0.415 (0.438)	Data 0.008 (0.020)	Loss 0.035 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.681 (0.688)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.677 (0.689)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 1.148 (0.698)	Data 0.483 (0.016)	
Extract Features: [400/542]	Time 0.680 (0.703)	Data 0.000 (0.020)	
Extract Features: [500/542]	Time 0.674 (0.699)	Data 0.000 (0.016)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-5][200/1000]	Time 0.430 (0.445)	Data 0.017 (0.027)	Loss 0.000 (0.022)
Epoch: [0-5][400/1000]	Time 0.432 (0.440)	Data 0.018 (0.023)	Loss 0.000 (0.022)
Epoch: [0-5][600/1000]	Time 0.430 (0.438)	Data 0.023 (0.021)	Loss 0.004 (0.022)
Epoch: [0-5][800/1000]	Time 0.428 (0.437)	Data 0.017 (0.021)	Loss 0.156 (0.022)
Epoch: [0-5][1000/1000]	Time 0.412 (0.437)	Data 0.008 (0.020)	Loss 0.053 (0.022)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.670 (0.687)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.851 (0.684)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 1.218 (0.695)	Data 0.550 (0.017)	
Extract Features: [400/542]	Time 0.681 (0.698)	Data 0.000 (0.021)	
Extract Features: [500/542]	Time 0.687 (0.695)	Data 0.000 (0.017)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-6][200/1000]	Time 0.425 (0.444)	Data 0.017 (0.025)	Loss 0.069 (0.018)
Epoch: [0-6][400/1000]	Time 0.429 (0.440)	Data 0.018 (0.022)	Loss 0.000 (0.017)
Epoch: [0-6][600/1000]	Time 0.430 (0.438)	Data 0.018 (0.021)	Loss 0.027 (0.019)
Epoch: [0-6][800/1000]	Time 0.429 (0.438)	Data 0.016 (0.021)	Loss 0.061 (0.019)
Epoch: [0-6][1000/1000]	Time 0.421 (0.438)	Data 0.008 (0.020)	Loss 0.000 (0.019)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.672 (0.680)	Data 0.000 (0.010)	
Extract Features: [200/542]	Time 0.662 (0.676)	Data 0.000 (0.005)	
Extract Features: [300/542]	Time 1.198 (0.687)	Data 0.532 (0.014)	
Extract Features: [400/542]	Time 0.671 (0.692)	Data 0.000 (0.018)	
Extract Features: [500/542]	Time 0.669 (0.689)	Data 0.000 (0.015)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [0-7][200/320]	Time 0.443 (0.445)	Data 0.019 (0.027)	Loss 0.001 (0.018)
Extract Features: [100/551]	Time 0.990 (1.047)	Data 0.334 (0.386)	
Extract Features: [200/551]	Time 0.990 (0.983)	Data 0.332 (0.317)	
Extract Features: [300/551]	Time 1.066 (0.999)	Data 0.402 (0.334)	
Extract Features: [400/551]	Time 0.769 (0.961)	Data 0.102 (0.294)	
Extract Features: [500/551]	Time 0.772 (0.926)	Data 0.105 (0.258)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          86.0%
  top-5          95.3%
  top-10         97.1%

 * Finished epoch   0 recall@1: 86.0%  recall@5: 95.3%  recall@10: 97.1%  best@5: 95.3% *

===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.681 (0.759)	Data 0.000 (0.081)	
Extract Features: [200/542]	Time 0.670 (0.719)	Data 0.000 (0.041)	
Extract Features: [300/542]	Time 1.299 (0.724)	Data 0.642 (0.045)	
Extract Features: [400/542]	Time 0.892 (0.730)	Data 0.224 (0.051)	
Extract Features: [500/542]	Time 0.682 (0.739)	Data 0.000 (0.062)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-0][200/1000]	Time 0.427 (0.446)	Data 0.019 (0.027)	Loss 0.000 (0.021)
Epoch: [1-0][400/1000]	Time 0.445 (0.440)	Data 0.017 (0.023)	Loss 0.012 (0.019)
Epoch: [1-0][600/1000]	Time 0.427 (0.438)	Data 0.018 (0.022)	Loss 0.028 (0.021)
Epoch: [1-0][800/1000]	Time 0.431 (0.437)	Data 0.017 (0.021)	Loss 0.005 (0.021)
Epoch: [1-0][1000/1000]	Time 0.420 (0.437)	Data 0.009 (0.020)	Loss 0.019 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.676 (0.683)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.671 (0.681)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 0.749 (0.687)	Data 0.078 (0.011)	
Extract Features: [400/542]	Time 0.664 (0.687)	Data 0.000 (0.013)	
Extract Features: [500/542]	Time 0.669 (0.682)	Data 0.000 (0.010)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-1][200/1000]	Time 0.435 (0.443)	Data 0.017 (0.025)	Loss 0.000 (0.019)
Epoch: [1-1][400/1000]	Time 0.511 (0.441)	Data 0.039 (0.022)	Loss 0.046 (0.020)
Epoch: [1-1][600/1000]	Time 0.427 (0.439)	Data 0.017 (0.021)	Loss 0.000 (0.020)
Epoch: [1-1][800/1000]	Time 0.436 (0.439)	Data 0.019 (0.020)	Loss 0.000 (0.019)
Epoch: [1-1][1000/1000]	Time 0.414 (0.438)	Data 0.008 (0.020)	Loss 0.000 (0.019)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.680 (0.685)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.689 (0.679)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 0.692 (0.676)	Data 0.000 (0.004)	
Extract Features: [400/542]	Time 0.683 (0.678)	Data 0.000 (0.003)	
Extract Features: [500/542]	Time 0.680 (0.681)	Data 0.000 (0.002)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-2][200/1000]	Time 0.457 (0.445)	Data 0.024 (0.026)	Loss 0.000 (0.020)
Epoch: [1-2][400/1000]	Time 0.440 (0.441)	Data 0.023 (0.023)	Loss 0.220 (0.022)
Epoch: [1-2][600/1000]	Time 0.438 (0.439)	Data 0.015 (0.021)	Loss 0.000 (0.021)
Epoch: [1-2][800/1000]	Time 0.428 (0.439)	Data 0.016 (0.021)	Loss 0.033 (0.021)
Epoch: [1-2][1000/1000]	Time 0.416 (0.439)	Data 0.008 (0.020)	Loss 0.000 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.664 (0.686)	Data 0.000 (0.010)	
Extract Features: [200/542]	Time 0.677 (0.682)	Data 0.000 (0.005)	
Extract Features: [300/542]	Time 0.667 (0.680)	Data 0.000 (0.003)	
Extract Features: [400/542]	Time 0.681 (0.680)	Data 0.000 (0.003)	
Extract Features: [500/542]	Time 0.673 (0.680)	Data 0.000 (0.002)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-3][200/1000]	Time 0.434 (0.442)	Data 0.017 (0.026)	Loss 0.000 (0.020)
Epoch: [1-3][400/1000]	Time 0.427 (0.439)	Data 0.018 (0.023)	Loss 0.000 (0.020)
Epoch: [1-3][600/1000]	Time 0.436 (0.438)	Data 0.026 (0.021)	Loss 0.000 (0.020)
Epoch: [1-3][800/1000]	Time 0.435 (0.439)	Data 0.021 (0.021)	Loss 0.051 (0.020)
Epoch: [1-3][1000/1000]	Time 0.414 (0.439)	Data 0.008 (0.020)	Loss 0.043 (0.019)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.661 (0.679)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.680 (0.674)	Data 0.000 (0.006)	
Extract Features: [300/542]	Time 0.667 (0.674)	Data 0.000 (0.004)	
Extract Features: [400/542]	Time 0.665 (0.674)	Data 0.000 (0.003)	
Extract Features: [500/542]	Time 0.914 (0.674)	Data 0.000 (0.002)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-4][200/1000]	Time 0.432 (0.444)	Data 0.017 (0.026)	Loss 0.012 (0.022)
Epoch: [1-4][400/1000]	Time 0.433 (0.441)	Data 0.018 (0.023)	Loss 0.075 (0.020)
Epoch: [1-4][600/1000]	Time 0.448 (0.439)	Data 0.025 (0.021)	Loss 0.015 (0.021)
Epoch: [1-4][800/1000]	Time 0.421 (0.439)	Data 0.017 (0.021)	Loss 0.019 (0.020)
Epoch: [1-4][1000/1000]	Time 0.416 (0.439)	Data 0.008 (0.021)	Loss 0.033 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.655 (0.678)	Data 0.000 (0.011)	
Extract Features: [200/542]	Time 0.680 (0.673)	Data 0.000 (0.005)	
Extract Features: [300/542]	Time 0.674 (0.673)	Data 0.000 (0.004)	
Extract Features: [400/542]	Time 0.682 (0.673)	Data 0.000 (0.003)	
Extract Features: [500/542]	Time 0.670 (0.676)	Data 0.000 (0.002)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-5][200/1000]	Time 0.436 (0.445)	Data 0.021 (0.026)	Loss 0.000 (0.019)
Epoch: [1-5][400/1000]	Time 0.435 (0.440)	Data 0.016 (0.022)	Loss 0.000 (0.017)
Epoch: [1-5][600/1000]	Time 0.431 (0.439)	Data 0.017 (0.021)	Loss 0.002 (0.018)
Epoch: [1-5][800/1000]	Time 0.434 (0.439)	Data 0.019 (0.021)	Loss 0.015 (0.018)
Epoch: [1-5][1000/1000]	Time 0.414 (0.438)	Data 0.008 (0.020)	Loss 0.000 (0.018)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.664 (0.682)	Data 0.000 (0.010)	
Extract Features: [200/542]	Time 0.677 (0.675)	Data 0.000 (0.005)	
Extract Features: [300/542]	Time 0.667 (0.675)	Data 0.000 (0.003)	
Extract Features: [400/542]	Time 0.668 (0.676)	Data 0.000 (0.003)	
Extract Features: [500/542]	Time 0.689 (0.675)	Data 0.000 (0.002)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-6][200/1000]	Time 0.426 (0.443)	Data 0.015 (0.026)	Loss 0.043 (0.019)
Epoch: [1-6][400/1000]	Time 0.447 (0.440)	Data 0.017 (0.022)	Loss 0.000 (0.020)
Epoch: [1-6][600/1000]	Time 0.434 (0.439)	Data 0.017 (0.021)	Loss 0.037 (0.020)
Epoch: [1-6][800/1000]	Time 0.426 (0.439)	Data 0.018 (0.021)	Loss 0.000 (0.020)
Epoch: [1-6][1000/1000]	Time 0.413 (0.440)	Data 0.008 (0.020)	Loss 0.013 (0.020)
===> Start extracting features for sorting gallery
Extract Features: [100/542]	Time 0.665 (0.676)	Data 0.000 (0.010)	
Extract Features: [200/542]	Time 0.678 (0.671)	Data 0.000 (0.005)	
Extract Features: [300/542]	Time 0.670 (0.670)	Data 0.000 (0.004)	
Extract Features: [400/542]	Time 0.680 (0.670)	Data 0.000 (0.003)	
Extract Features: [500/542]	Time 0.670 (0.675)	Data 0.000 (0.002)	
===> Start calculating pairwise distances
===> Start sorting gallery
Epoch: [1-7][200/320]	Time 0.426 (0.442)	Data 0.020 (0.025)	Loss 0.000 (0.016)
Extract Features: [100/551]	Time 0.973 (1.013)	Data 0.319 (0.349)	
Extract Features: [200/551]	Time 0.823 (0.957)	Data 0.165 (0.290)	
Extract Features: [300/551]	Time 1.088 (0.976)	Data 0.423 (0.307)	
Extract Features: [400/551]	Time 0.816 (0.932)	Data 0.160 (0.263)	
Extract Features: [500/551]	Time 0.688 (0.899)	Data 0.000 (0.228)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          86.7%
  top-5          95.4%
  top-10         97.2%

 * Finished epoch   1 recall@1: 86.7%  recall@5: 95.4%  recall@10: 97.2%  best@5: 95.4% *

Performing PCA reduction on the best model:
=> Loaded checkpoint '/media/leo/2C737A9872F69ECF/why-so-deepv2-data/pittsburgh/netvlad-run/pitts30k-vgg16/conv5-triplet-lr0.001-tuple1/model_best.pth.tar'
Extract Features: [100/542]	Time 0.686 (0.761)	Data 0.000 (0.081)	
Extract Features: [200/542]	Time 0.676 (0.722)	Data 0.000 (0.041)	
Extract Features: [300/542]	Time 0.839 (0.713)	Data 0.165 (0.030)	
Extract Features: [400/542]	Time 0.683 (0.710)	Data 0.000 (0.029)	
Extract Features: [500/542]	Time 0.686 (0.704)	Data 0.000 (0.023)	
calculating PCA parameters...
================= PCA RESULT ==================
U: (32768, 4096)
lams: (4096,)
mu: (32768, 1)
Utmu: (4096, 1)
===============================================
Testing on Pitts30k-test:
load PCA parameters...
Extract Features: [100/526]	Time 1.099 (1.061)	Data 0.421 (0.385)	
Extract Features: [200/526]	Time 0.840 (1.023)	Data 0.165 (0.347)	
Extract Features: [300/526]	Time 1.159 (1.012)	Data 0.490 (0.335)	
Extract Features: [400/526]	Time 1.007 (0.983)	Data 0.325 (0.305)	
Extract Features: [500/526]	Time 0.787 (0.951)	Data 0.103 (0.273)	
===> Start calculating pairwise distances
===> Start calculating recalls
Recall Scores:
  top-1          87.0%
  top-5          93.9%
  top-10         95.3%
